=== Common tasks ===
Full README
spec Rango
yardoc:
	- syntax off for shell commands
	- examples: not use <pre>, do not escape characters here, enable usage of comments, options keys
	- what is just optional argument
	- array of string etc

=== Rango 0.2: ===
=> Requests logger, router
refactoring of error handling
logger:
	- settings (where to log - file, STDERR, format)
router:
	- redirect
  - placeholders
  - unnamed args
  - 404 & 500 errors
	- match(:domain => "somecooldomain.com", :subdomain => /regexp/)
	- implement include and defer_to
	- router method default can take blok
raise NotFound unless @post => route to Exceptions or what?
diff configuration (global vs. mine, anyone else vs. mine)
(logger) general, safe solution for filtering backtraces (maybe settings: filter_backtraces: true/false, filter_backtraces_pattern: regexp)
404, 500 HTML output (with backtraces/routes, at least some CSS)
Rango.template("404.html")

=== Rango 0.3 ===
=> rack, controllers
static content serving
files uploading
middlewares (see http://wiki.merbivore.com/deployment/haproxy)
registering mime types
"provides" API for handling mime-types as in merb?
cookies, sessions
render & display: automatically find template
redirect
flash messages
filters, skipping filters

=== Rango 0.4 ===
=> templates
- extends "base.html"
- load foo
- escape everything
- escape @ in emails
router resources? if so, then with translation
parse backtrace (another color for path, another for line and method)
maybe relative paths for project files will be better
views helpers (error_messages_for etc)

=== Rango 0.5 ===
=> Bundling, pupu
possibility how to run without rubygems (microgems?)
GemDependencyStrategy, GitDependencyStrategy, SvnDependencyStrategy etc, user can write his own strategies
bundlovani: na serveru chceme jine gemy nez na lokalhostu, ale bundlovat chceme vsechny (gems/development maybe)
Rango.bundle("do_mysql" "version")
what about git submodules?

=== Rango 0.6 ===
=> Documentation, tasks, testing
Thor 1.9 compatible
update task for all the thor classes (thor pupu:selfupdate)
thor stats for projects
spec: should have_xpath, have_selector, match etc
thor spec:features
thor spec:models
thor spec:coverage (rcov)
autotest, autospec
factories
cucumber adapter
rspec adapter
rcov (project & rango)

=== Rango 0.7 ===
forms? something like Django forms?
etag, last modified middleware
cache
mailer (merb messenger-like notifications)
auth
generic views
contrib:
	- syndication
	- flatpages

=== Rango 0.8 ===
=> API for writing plugins & profiling & benchmarking & debuging
fireruby logger adapter
http://debu.gs/live-console
plugins can add new stubs (for controller etc)
profiling, benchmarking (test oproti merb, rails, django, sinatra)

=== Rango 0.9 ===
=> m17n

=== Rango 1.0 ===
=> contrib
	autoadmin
	comments
	exceptions notifications (=> email)
=> refactoring, respecing, redocumenting
http://rubyforge.org/projects/rango
Error500 in browser just like in TM (txmt://, filter backtraces, show code etc) ... the code should be highlighted if uv is installed
