=== Common tasks ===
Full README
Doc for classes, not just for methods
in README should be just basic informations, others should be in doc/rango or so
class Dispatcher move from config.ru to library
spec Rango
yardoc:
  - syntax off for shell commands
  - examples: not use <pre>, do not escape characters here, enable usage of comments, options keys
  - what is just optional argument
  - array of string etc
Before release it should generate project, application and flatproject and try if server properly start with default setup
init.rb in app: Blog.logger etc, not just Project.logger
extlib, maybe extensions, look for rack middlewares
vygeneruj a otestuj zda neselze spusteni serveru
rescue SkipRoute => exception # TODO: implement this feature
  Rango.logger.debug("Skipping route #{exception.route}") # TODO: the route
raise Error404.new unless @post: predavat params. Kernel#caller maybe?

=== Rango 0.2: ===
=> Requests logger, router
refactoring of error handling
logger:
  - settings (where to log - file, STDERR, format)
router:
  - redirect
  - placeholders
  - unnamed args
  - 404 & 500 errors
  - match(:domain => "somecooldomain.com", :subdomain => /regexp/)
  - implement include and defer_to
  - router method default can take blok
raise NotFound unless @post => route to Exceptions or what?
diff configuration (global vs. mine, anyone else vs. mine)
(logger) general, safe solution for filtering backtraces (maybe settings: filter_backtraces: true/false, filter_backtraces_pattern: regexp)
404, 500 HTML output (with backtraces/routes, at least some CSS)
Rango.template("404.html")

=== Rango 0.3 ===
=> rack, controllers
static content serving
files uploading
middlewares (see http://wiki.merbivore.com/deployment/haproxy)
registering mime types
"provides" API for handling mime-types as in merb?
cookies, sessions
render & display: automatically find template
redirect
flash messages
what about request.path? rack works with /foo

=== Rango 0.4 ===
=> templates
- extends "base.html"
- load foo
- escape everything
- escape @ in emails => middleware!
router resources? if so, then with translation
parse backtrace (another color for path, another for line and method)
maybe relative paths for project files will be better
views helpers (error_messages_for etc)

=== Rango 0.5 ===
=> Bundling, pupu
possibility how to run without rubygems (microgems?)
GemDependencyStrategy, GitDependencyStrategy, SvnDependencyStrategy etc, user can write his own strategies
bundlovani: na serveru chceme jine gemy nez na lokalhostu, ale bundlovat chceme vsechny (gems/development maybe)
Rango.bundle("do_mysql" "version")
what about git submodules?

=== Rango 0.6 ===
=> Documentation, tasks, testing
Thor 1.9 compatible
update task for all the thor classes (thor pupu:selfupdate)
thor stats for projects
spec will be app-level, but what about features? project level?
spec: should have_xpath, have_selector, match etc
thor spec:features
thor spec:models
thor spec:coverage (rcov)
autotest, autospec
factories
cucumber adapter
rspec adapter
rcov (project & rango)

=== Rango 0.7 ===
forms? something like Django forms?
etag, last modified middleware (rack-contrib)
cache
mailer (merb messenger-like notifications)
auth
generic views
contrib:
  - syndication
  - flatpages

=== Rango 0.8 ===
=> API for writing plugins & profiling & benchmarking & debuging
fireruby logger adapter
http://debu.gs/live-console
plugins can add new stubs (for controller etc)
profiling, benchmarking (test oproti merb, rails, django, sinatra)

=== Rango 0.9 ===
=> m17n

=== Rango 1.0 ===
=> contrib
  autoadmin
  comments
  exceptions notifications (=> email)
=> refactoring, respecing, redocumenting
http://rubyforge.org/projects/rango
Error500 in browser just like in TM (txmt://, filter backtraces, show code etc) ... the code should be highlighted if uv is installed
