=== Rango 0.1: Miracle born ===
Full README & inline documentation
spec Rango & write rango spec tasks
refactoring of error handling
404, 500 HTML output (with backtraces/routes, at least some CSS)
Rango.template("404.html")
(logger) general, safe solution for filtering backtraces (maybe settings: filter_backtraces: true/false, filter_backtraces_pattern: regexp)
Rango.boot => runner
installing:
	- setup.rb uninstall
	- install task for
	- Read about RubyGems options http://rubygems.org/read/chapter/20
yardoc:
	- syntax off for shell commands
	- examples: not use <pre>, do not escape characters here, enable usage of comments, options keys
	- what is just optional argument
	- array of string etc

=== Rango 0.2: ===
=> Requests logger, router
logger:
	- settings (where to log - file, STDERR, format)
router:
	- redirect
  - placeholders
  - unnamed args
  - 404 & 500 errors
	- match(:domain => "somecooldomain.com", :subdomain => /regexp/)
	- implement include and defer_to
	- router method default can take blok
raise NotFound unless @post => route to Exceptions or what?
diff configuration (global vs. mine, anyone else vs. mine)

=== Rango 0.3 ===
=> rack
static content serving
files uploading
middlewares (see http://wiki.merbivore.com/deployment/haproxy)
registering mime types
"provides" API for handling mime-types as in merb?
cookies, sessions

=== Rango 0.4 ===
=> templates
- extends "base.html"
- load foo
- escape everything
- escape @ in emails
router resources? if so, then with translation
parse backtrace (another color for path, another for line and method)
maybe relative paths for project files will be better

=== Rango 0.5 ===
=> Bundling
possibility how to run without rubygems (microgems?)
GemDependencyStrategy, GitDependencyStrategy, SvnDependencyStrategy etc, user can write his own strategies
pupu
install from GH
bundlovani: na serveru chceme jine gemy nez na lokalhostu, ale bundlovat chceme vsechny (gems/development maybe)
Rango.bundle("do_mysql" "version")
what about git submodules?

=== Rango 0.6 ===
=> Documentation, tasks, testing
Thor 1.9 compatible
update task for all the thor classes (thor pupu:selfupdate)
thor stats for projects
spec: should have_xpath, have_selector, match etc
thor spec:features
thor spec:models
thor spec:coverage (rcov)
autotest, autospec
factories
cucumber adapter
rspec adapter
rcov (project & rango)

=== Rango 0.7 ===
forms? something like Django forms?
etag, last modified middleware
cache
mailer (merb messenger-like notifications)
auth

generic views
contrib:
	- syndication
	- flatpages

=== Rango 0.8 ===
=> API for writing plugins
profiling, benchmarking (test oproti merb, rails, django, sinatra)

=== Rango 0.9 ===
=> MVC
render & display: automatically find template
redirect
flash messages
views helpers
filters, skipping filters
error_messages_for
plugins can add new stubs (for controller etc)

=== Rango 1.0 ===
=> refactoring, respecing, redocumenting
support: TM bundle
Error500 in browser just like in TM (txmt://, filter backtraces, show code etc) ... the code should be highlighted if uv is installed

=== Rango 1.1 ===
=> m17n & fireruby
fireruby logger adapter
http://debu.gs/live-console

=== Rango 1.2 ===
=> contrib
comments
exceptions notifications (=> email)

=== Rango 1.3 ===
=> autoadmin