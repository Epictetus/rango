#!/usr/bin/env ruby1.9
# encoding: utf-8

base   = File.symlink?(__FILE__) ? File.readlink(__FILE__) : __FILE__
libdir = File.expand_path(File.join(File.dirname(base), "..", "lib"))

vendor = File.join(File.dirname(__FILE__), "..", "vendor")
if File.directory?(vendor)
  Dir["#{vendor}/*"].each do |path|
    if File.directory?(path) && Dir["#{path}/*"].empty?
      warn "Dependency #{File.basename(path)} in vendor seems to be empty. Run git submodule init && git submodule update to checkout it."
    elsif File.directory?(path) && File.directory?(File.join(path, "lib"))
      $:.unshift(File.join(path, "lib"))
    end
  end
end

# because of system installation, there is bin/../lib, but not bin/../lib/rango
if File.directory?(File.join(libdir, "rango"))
  $:.unshift(libdir) unless $:.include?(libdir)
end

begin
  require "simple-templater"
rescue LoadError
  abort "You have to install simple-templater first!"
end

require "rango"

# === Helpers === #
# TODO: Generators.each { |generator| puts generator.help }
def usage
<<-HELP
=== Usage ===
rango create project mycoolproject    Generate new site
rango create app mycoolapp            Generate new application
HELP
end

begin
  generator = ARGV.shift
  templater = SimpleTemplater.new(:rango, Rango.logger)
  # This enables you to create custom generators for Rango
  templater.discover!
  templater.find(generator)
  begin
    SimpleTemplater::Generator.new(*ARGV).create
  rescue ArgumentError => exception
    abort [exception.inspect, "", usage].join("\n")
  end
rescue SimpleTemplater::GeneratorNotFound => exception
  warn "Generator #{ARGV.first} doesn't exist. Available generators are:"
  warn templater.generators.join
  exit 1
end
