#!/usr/bin/env ruby1.9
# encoding: utf-8

base   = File.symlink?(__FILE__) ? File.readlink(__FILE__) : __FILE__
libdir = File.expand_path(File.join(File.dirname(base), "..", "lib"))

vendor = File.join(File.dirname(__FILE__), "..", "vendor")
if File.directory?(vendor)
  Dir["#{vendor}/*"].each do |path|
    if File.directory?(path) && Dir["#{path}/*"].empty?
      warn "Dependency #{File.basename(path)} in vendor seems to be empty. Run git submodule init && git submodule update to checkout it."
    elsif File.directory?(path) && File.directory?(File.join(path, "lib"))
      $:.unshift(File.join(path, "lib"))
    end
  end
end

# because of system installation, there is bin/../lib, but not bin/../lib/rango
if File.directory?(File.join(libdir, "rango"))
  $:.unshift(libdir) unless $:.include?(libdir)
end

def help(command, description, indentation = 40)
  indentation = indentation - command.length
  spaces = " " * indentation
  STDERR.puts(command + spaces + description)
end

case command = ARGV.shift
when "create"
  # we can't use require_relative because it can be symlinked to
  # /usr/bin or just be located in different place than we expect
  require "rango/cli/generator"
  Rango::CLI::Generator.new(*ARGV).create
when "-i"
  require "rango"
  Rango.boot
  Rango.interactive
else
  # TODO: Generators.each { |generator| puts generator.help }
  STDERR.puts("=== Usage ===")
  help "rango create project mycoolproject", "Generate new site"
  help "rango create app mycoolapp", "Generate new application"
  help "rango -i", "Start Rango console"
  exit 1
end
